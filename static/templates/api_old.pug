mixin headerLink(link, name)
	a.header-link(href="#" + link)= name

mixin introMenu(ref, name, endpoint)
	p
		a(href="#" + ref)
			u= name
		|
		|
		i= endpoint

mixin revealTag(text)
	p.reveal
		b= text

doctype html
html(lang="en")
	head
		title Geometry Dash Browser!
		meta(charset="UTF-8")
		link(rel="icon", href="/assets/difficulties/auto.png")
		link(href="/assets/css/api.css", type="text/css", rel="stylesheet")
		script(type="text/javascript", src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.js")
		link(href="https://fonts.googleapis.com/css?family=Roboto:300,400,600,700,800&display=swap", rel="stylesheet")
		meta(id="meta-title", property="og:title", content="GDBrowser API")
		meta(id="meta-desc", property="og:description", content="It's basically the Geometry Dash API, but not terrible!")
		meta(id="meta-image", name="og:image", itemprop="image", content="/assets/difficulties/auto.png")
		meta(name="twitter:card", content="summary")
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
	body
		.main-header-wrap
			.main-header
				#menu-btn.header-drawer
					img#menu-btn-img(src="/assets/menu-ic.svg", alt="Menu")
				.header-links.hid
					a.header-link(href="#intro") Introduction
					.header-category
						.category-name Levels
						.category-content
							+headerLink("level", "Levels")
							+headerLink("search", "Searching")
							+headerLink("mappacks", "Map Packs + Gauntlets")
							+headerLink("levelleaderboard", "Level Leaderboards")
					.header-category
						.category-name Users
						.category-content
							+headerLink("profile", "Profiles")
							+headerLink("leaderboard", "Leaderboards")
							+headerLink("comments", "Comments & Posts")
					.header-category
						.category-name Account
						.category-content
							+headerLink("commenting", "Commenting")
							+headerLink("profileposting", "Profile Posting")
							+headerLink("liking", "Liking")
							+headerLink("message", "Messages")
					.header-category
						.category-name Misc
						.category-content
							+headerLink("analyze", "Analysis")
							+headerLink("artist", "Song Verification")
							+headerLink("icons", "Icons")
		#intro.anchor
			main
				.main-block
					h1 Hi there!
					p
						| This is the documentation for the
						|
						sb Geometry Dash Level Browser API
						| !
						|
						br
						br
						|
						| The
						|
						sb API
						|
						| (application programming interface) is how the website is able to get all the neat stuff from the Geometry Dash servers. In the off chance that you actually know what any of this means, this page contains everything you need to know about grabbing information on GD levels/accounts/etc without going through the trouble of using the actual GD API on boomlings.com
						br
						br
						| Geometry Dash's API isn't meant to be publicly used, and is a
						|
						a(href="https://i.imgur.com/PZ2AsZB.png", target="_blank") total nightmare
						|
						| to fetch stuff from. That's why I made this API to send you whatever you need in a nice, clean JSON. You're welcome.
						br
						br
						| Everything on the API can be accessed
						|
						sb without any authorization
						| , and with little to no required parameters.

				.main-block(style={ "margin-top": "20px" })
					p Here are the different things you can use the API for. Click one to skip to it's documentation.

					quote
						+introMenu("level", "Levels", "/api/level/levelID")
						+introMenu("profile", "Profiles", "/api/profile/username-or-id")
						+introMenu("search", "Searching", "/api/search/search-query")
						+introMenu("leaderboard", "Leaderboards", "/api/leaderboard")
						+introMenu("levelleaderboard", "Level Leaderboards", "/api/leaderboardLevel/levelID")
						+introMenu("comments", "Comments & Posts", "/api/comments/level-or-user-ID")
						+introMenu("analyze", "Level Analysis", "/api/analyze/levelID")
						+introMenu("commenting", "Commenting", "/postComment (POST)")
						+introMenu("profileposting", "Profile Posting", "/postProfileComment (POST)")
						+introMenu("messages", "Messages", "/messages (4 different POSTs)")
						+introMenu("liking", "Liking", "/like (POST)")
						+introMenu("icons", "Icons", "/icon/username")
					br
					p
						| In the event that something goes horribly wrong and the server doesn't like your request (or you tried to search for a level/profile/etc that doesn't exist), the API will return
						|
						sb "-1"
						| . It doesn't actually mean anything, I was just referencing the Geometry Dash servers. But yeah, if it responds that just double check the documentation or make sure what you're looking for actually exists.
					p
						b
							| If by any chance you use this API for other projects, credit is greatly appreciated!
							|
							smile1
				.separator
			main
				#level.anchor
				.main-block
					h1 Levels
					p /api/level/levelID
					br
					p LevelID should be the ID of a level (whoa)
					p Using "daily" or "weekly" as the level ID will return the current daily/weekly level (always downloaded)

					br
					+revealTag("Parameters (1)")
					#params-level.subdiv
						p download: Whether or not to actually download the level (much slower)
						p *By default it performs a search for the level ID and returns as much information as possible without downloading

					br
					+revealTag("Response (47)")
					#response-level.subdiv
						p.br
							| *Values that require a download are in
							|
							span(style={ color: "red" }) red
							|
							| and values that only work with daily/weekly levels are
							|
							span(style={ color: "#00abee" }) blue
						p name: The name of the level
						p id: The ID of the level
						p description: The description
						p author: The name of the level's author (appears lower down in response)
						p playerID: The unique player ID of the level's author
						p accountID: The account ID of the level's author. An ID of 0 indicates a green (unregistered) user
						p difficulty: The difficulty of the level (as a string). Includes demon rating
						p downloads: Number of downloads
						p likes: Number of likes
						p disliked: If the level has a negative number of likes (true/false)
						p length: The length of the level (Tiny/Short/Medium/Long/XL)
						p stars: Amount of stars received for beating the level
						p orbs: Amount of mana orbs received for beating the level
						p diamonds: Amount of diamonds received for beating the level (stars + 2)
						p featured: Whether the level is featured or not
						p epic: Whether the level has an "epic" rating or not
						p gameVersion: The version of GD the level was released on (1.9, 2.1, etc)
						p version: Number of times the level was updated
						p copiedID: The original level ID, if the level was copied. Otherwise returns 0
						p twoPlayer: If the level has two player mode enabled
						p officialSong: The level number of the song, if no custom song is used. Otherwise returns 0
						p customSong: The ID of the song, if a custom song was used. Otherwise returns 0
						p coins: Number of user coins placed in the level
						p verifiedCoins: Whether these coins are verified or not
						p starsRequested: How many stars the author requested the level to be rated. 0 if no request was given
						p objects: The number of objects in the level. This was added in a recent version of GD, so older levels will simply return 0
						p large: Whether the level is considered "large" (more than 40k objects)
						p cp: How many creator points the level is worth (1 for star rating, 1 for feature, and 1 for epic rating)
						p difficultyFace: The URL of the difficulty face image for this level. Plug it into gdbrowser.com/assets/difficulties/{difficultyFace}.png
						p songName: The name of the song used for the level
						p songAuthor: The name of the author of said song
						p songSize: The size of the song in megabytes, if a custom song was used
						p songID: The ID of the song (again). If a non-custom song was used, this will return a string with the level number of the song
						p songLink: The link to the raw MP3 of the song, if available
						p demonList: The level's position on the Demon List (Pointercrate). Extreme demons only
						p.red uploaded: Time since the level was uploaded (sent as "x days/weeks/months" ago, since it's all the API sends)
						p.red updated: Time since the level was last updated
						p.red password: The password to copy the level. 0 means the level isn't copyable and 1 means it's free to copy
						p.red editorTime: The amount of seconds spent in the editor (currently only works when using GDBrowser locally)
						p.red totalEditorTime: The amount of seconds spent in the editor, including time from the level it was copied from
						p.red ldm: If the level contains a checkbox for Low Detail Mode
						p.blue weekly: If the values below represent the weekly demon rather than the daily level
						p.blue dailyNumber: Which daily/weekly the level is (e.g. 1000th daily level)
						p.blue nextDaily: The amount of seconds until the daily/weekly level expires
						p.blue nextDailyTimestamp: The Unix timestamp for when the daily/weekly level expires
						p.red extraString: An unknown data string
						p.red data: The actual data of the level, compressed with GZIP

					br
					+revealTag("Example")
					#request-level.subdiv
						p
							b Example Request
						p /api/level/91209839
						p (the ID for "isolation my ver" by newvietnam)

						br

						p
							b Example Response
						pre
							p.fetch(link="/api/level/91209839") Loading...
					br
				.separator
			main
				#profile.anchor
				.main-block
					h1 Profiles
					p /api/profile/username-or-id
					br
					p Unlike the Geometry Dash API, both username and ID can be used to fetch a user profile.

					br
					+revealTag("Parameters (1)")
					#params-profile.subdiv
						p player: Forces the player ID to be used for fetching (normally Account ID is tried first)

					br
					+revealTag("Response (30)")
					#response-profile.subdiv
						p username: The name of the player
						p playerID: The unique ID for all accounts
						p accountID: An additional ID for registered accounts
						p rank: The global rank of the player. Returns 0 if banned or star count is too low
						p stars: Number of stars the player has
						p diamonds: Number of diamonds
						p coins: Number of secret coins
						p userCoins: Number of user coins
						p demons: Number of completed demons
						p cp: Number of creator points
						p friendRequests: If the player has friend requests enabled
						p messages: If the player has messages enabled. Returns "all", "friends", or "off"
						p commentHistory: If the player has a visible comment history. Returns "all", "friends", or "off"
						p moderator: If the player is a moderator. Returns 0 (none), 1 (mod) or 2 (elder)
						p youtube: The URL of the player's YouTube channel, if linked. Plug it into https://youtube.com/channel/{youtube}
						p twitter: The URL of the player's Twitter account, if linked. Plug it into https://twitter.com/{twitter}
						p twitch: The URL of the player's Twitch account, if linked. Plug it into https://twitch.tv/{twitch}
						p glow: If the player's icon has a glow or not
						p icon, ship, ball, ufo, wave, robot, spider, col1, col2, deathEffect: The number of the icon/color used for each form. The actual icon can be generated through
							a(href="#icons") /icon
						p col1RGB, col2RGB: The RGB color values for each player color

					br
					+revealTag("Example")
					#request-profile.subdiv
						p
							b Example Request
						p /api/profile/newvietnam
						p (fetches the user named newvietnam)

						br

						p
							b Example Response
						pre
							p.fetch(link="/api/profile/newvietnam") Loading...
					br
				.separator
			main
				#search.anchor

				.main-block
					h1 Searching
					p /api/search/search-query

					p Use an asterisk (*) as your search query if you do not wish to search by level name (if you intend on using filters)

					br
					+revealTag("Parameters (19)")
					#params-search.subdiv
						p Buckle up... there's a lot

						br
						p
							b Params that require a number
							|
							| (e.g. ?page=1)
						p count: The amount of levels to list (default is 10, max is 500)
						p
							| diff: The number of the difficulty to search for, see
							|
							u difficulty IDs
							|
							| below
						p demonFilter: If searching for demon levels, what difficulty to search for (1 is easy, 5 is extreme)
						p page: The page of the search
						p gauntlet: The number of the gauntlet to view (will return the 5 levels)
						p length: Only return levels with this length (0-4, 0 is tiny and 4 is XL)
						p songID: Only return levels that use this official song number (2-21, unless you want hacked levels with songs from meltdown/subzero/etc. Also, Stereo Madness and Back on Track don't seem to work). Add the 'customSong' parameter to read the number as a custom song ID.

						br
						p
							b Params that require a string
							|
							| (e.g. ?type=trending)
						p
							| type: The type of search to perform, see
							|
							u search types
							|
							| below
						p creators: A comment seperated list of account IDs. Only levels by those players will be returned

						br
						p
							b Params that require anything
							|
							| (e.g. ?featured=yes or ?featured)
						p list: Reads and returns a custom list of levels (search query should be a comma seperated list of IDs)
						p featured: Only return featured levels
						p original: Only return non-copied levels
						p twoPlayer: Only return two player mode levels
						p coins: Only return levels with verified coins
						p epic: Only return levels with an epic rating
						p starred: Only return levels with a star rating
						p noStar: Only return levels without a star rating
						p customSong: Reads the 'song' parameter as a custom song ID instead of an official one
						p user: Reads the search query as a player's ID and returns their levels

						br
						p
							b Search Types
						p All types ignore your search query and will return levels with any n
						p Filters allowed: mostdownloaded, mostliked, trending, recent, awarded
						p Filters ignored: featured, magic, halloffame, gdworld

						br
						p
							b Difficulty IDs
						p 1-5: Easy to insane, multiple can be selected (separate with commas)
						p -2: Demon (use demonFilter for a specific difficulty)
						p -3: Auto
						p -1: N/A

					br
					+revealTag("Response*")
					#response-search.subdiv
						p
							| The response for searching is an array of up to 10
							|
							a(href="#level") level objects
						p
							| If the page is set to 0, the first level object will also display the number of pages and search results.
							br
							| Since RobTop is a ploopy this only works on the first page, and may sometimes just display 9999 results.

					br
					+revealTag("Examples")
					#request-search.subdiv
						p
							b Example Requests
						p /api/search/abc (Searches for a level named "abc")
						p /api/search/zodiac?diff=-2&amp;demonFilter=5 (Searches for an extreme demon named "Zodiac")
						p /api/search/186646,13519,55520?list=1 (Searches for the levels in Demon Pack 3)
						p /api/search/*?diff=-3 (Searches for any auto levels, regardless of name)
						p /api/search/*?type=trending&amp;noStar (Searches for trending levels without a star rating)
						p /api/search/*?gauntlet=3 (Fetches the Poison Gauntlet)

						br
						p
							b Example Response
						p (first example used)
						pre
							p.fetch(link="/api/search/abc?count=3") Loading...
					br
				.separator
			main
				#leaderboard.anchor

				.main-block
					h1 Leaderboards
					p /api/leaderboard
					br
					p Returns the top player, creator, and accurate leaderboards

					br
					+revealTag("Parameters (6)")
					#params-leaderboard.subdiv
						p(class="br")
							| *Values that only work with the accurate leaderboard are in
							|
							span(style={ color: "red" }) red
						p count: The amount of players to list (default is 100, max is 5000, does not work with accurate leaderboard)
						p creator: Fetches the creator leaderboard
						p accurate: Fetches the accurate leaderboard
						p.red type: The type of stat to sort by (stars, coins, diamonds, or demons)
						p.red mod: Restricts the leaderboard to GD mods only
						p.red gd: Formats the leaderboard using GD's number:value syntax (for use in GD)

					br
					+revealTag("Response (10)")
					#response-leaderboard.subdiv
						p The API will return an array of each player with the following information:
						p rank: Position on the leaderboard
						p username: The player's username
						p playerID: The player's ID
						p stars: Number of stars the player has
						p demons: Number of completed demons
						p cp: Number of creator points
						p coins: Number of secret coins
						p userCoins: Number of user coins
						p diamonds: Number of diamonds
						p icon: The icon preview showed next to the player's name

					br
					+revealTag("Examples")
					#request-leaderboard.subdiv
						p
							b Example Requests
						p /api/leaderboard?count=10 (Fetches the top 10 players)
						p /api/leaderboard (Fetches the top 100 players)
						p /api/leaderboard?creator&amp;count=250 (Fetches the top 250 creators)

						br
						p
							b Example Response
						p (first example used)
						pre
							p.fetch(link="/api/leaderboard?count=10") Loading...
					br
				.separator
			main
				#mappacks.anchor

				.main-block
					h1 Map Packs
					p /api/mappacks
					h1 Gauntlets
					p /api/gauntlets

					p Returns the list of map packs or gauntlets
					p(style={ "font-size": "14px" }) I'm putting this in the same section because they're basically the same lol

					br
					+revealTag("Parameters (0)")
					#params-mappacks.subdiv
						p No parameters for this one!

					br
					+revealTag("Response (8)")
					#response-mappacks.subdiv
						p(class="br")
							| *Values in
							|
							span(style={ color: "#00abee" }) blue
							|
							| are used in gauntlets, everything else is exclusive to map packs
						p.blue id: The ID of the map pack, or index/type of the gauntlet
						p.blue name: The name of the pack. Note that Gauntlet names are hardcoded by GD and may be inaccurate for edited private servers
						p.blue levels: An array of level IDs in the pack. Fetch with /search/ using the ?list parameter
						p stars: The amount of stars rewarded for completing the map pack
						p coins: Basically the only reason people play map packs LOL
						p difficulty: The (usually inaccurate) difficulty face of the map pack
						p barColor: The RGB color of the pack's progress bar
						p textColor: The RGB color of the pack's name

					br
					+revealTag("Example")
					#request-mappacks.subdiv
						p
							b Example Request
						p /api/mappacks
						br
						p
							b Example Response
						pre
							p.fetch(link="/api/mappacks") Loading...
					br
				.separator
			main
				#levelLeaderboard.anchor

				.main-block
					h1 Level Leaderboards (usually broken)
					p /api/leaderboardLevel/levelID

					p Returns the leaderboard for a level

					br
					+revealTag("Parameters (2)")
					#params-levelleaderboard.subdiv
						p count: The amount of players to list (default is 100, max is 200)
						p week: Whether or not to fetch the weekly leaderboard instead of the regular one

					br
					+revealTag("Response (7)")
					#response-levelleaderboard.subdiv
						p The API will return an array of each player with the following information:
						p rank: Position on the leaderboard
						p username: The player's username
						p playerID: The player's ID
						p accountID: The player's account ID
						p percent: Percent on the level
						p coins: Number of coins obtained (0-3)
						p date: Time since score was submitted (sent as "x days/weeks/months" ago, since it's all the API sends)
						p icon: The icon preview showed next to the player's name

					br
					+revealTag("Example")
					#request-levelleaderboard.subdiv
						p
							b Example Request
						p /api/leaderboardLevel/91209839 (Fetches the leaderboard for "isolation my ver")

						br
						p
							b Example Response
						pre
							p.fetch(link="/api/leaderboardLevel/91209839?count=10") Loading...
					br
				.separator
			main
				#comment.anchor

				.main-block
					h1 Comments and Profile Posts
					p /api/comments/level-or-user-ID

					p Returns up to 10 comments or profile posts

					br
					+revealTag("Parameters (4)")
					#params-comment.subdiv
						p page: The page of the search
						p top: Whether or not to sort by most liked (comments only)
						p count: The number of comments/posts to list (default is 10, max is 1000)
						p type: The type of comments to fetch. Instead of a level ID, they require a player and account ID, respectively.
						p.indent • commentHistory - All the comments from a player, if public on their profile
						p.indent • profile - A player's profile posts

					br
					+revealTag("Response (16)")
					#response-comment.subdiv
						p
							| The API will return an array of each comment with the following information.
							br
							| Values that don't work for profile posts are in
							|
							span(style={ color: "red" }) red
						p content: The comment text
						p ID: The ID of the comment (used for liking and deleting)
						p likes: The number of likes the comment has
						p date: Time since the comment was posted (sent as "x days/weeks/months" ago, since it's all the API sends)
						p levelID: The ID of the level
						p browserColor: If the comment was posted through GDBrowser
						p.red username: The commenter's username
						p.red playerID: The commenter's player ID
						p.red accountID: The commenter's account ID
						p.red percent: The commenter's percent on the level, if provided
						p.red color: The RGB font color of the comment. Note that the yellow author text is not included
						p.red moderator: If type of moderator the commenter is. Returns 0 (none), 1 (mod) or 2 (elder, green text)
						p.red icon: The icon preview showed next to the commenter's name
						p.blue results: The total number of comments (first comment only, doesn't work with comment history)
						p.blue pages: The total number of pages, starting at 1
						p.blue range: The index of comments that were fetched

					br
					+revealTag("Examples")
					#request-comment.subdiv
						p
							b Example Requests
						p /api/comments/91209839?top (Fetches isolation my ver's most liked comments)</p>
						p /api/comments/197150646?type=commentHistory (Fetches newvietnam's comment history)</p>
						p /api/comments/21946955?type=profile (Fetches newvietnam's profile posts)</p>

						br
						p
							b Example Response
						p (first example used)
						pre
							p.fetch(link="/api/comments/91209839?top") Loading...
					br
				.separator
			main
				#commenting.anchor

				.main-block
					h1 Commenting (usually broken)
					p POST: /postComment

					p Leaves a comment on a level. This one is a POST request!
					p *Commenting has a rate limit of 15 seconds

					br
					+revealTag("Parameters (6)")
					#params-commenting.subdiv
						p comment: The content of the comment
						p username: Your username
						p accountID: Your account ID
						p password: Your password (as plain text)
						p levelID: The ID of the level to comment on
						p percent: The percent shown on the comment (optional)
						p color: If the comment should have a special pink color on GDBrowser (optional)

					br
					+revealTag("Example")
					#request-commenting.subdiv
						p
							b Example Request
						p
							| POST /postComment
							br
							| ?comment=oof
							br
							| &amp;username=newvietnam
							br
							| &amp;accountID=21946955
							br
							| &amp;password=PartiaKomunistycznaIndonezyjska
							br
							| &amp;levelID=21448270
							br
							| &amp;percent=98

						br
						p If a status of 200 is returned, then the comment was successfully posted. Otherwise, a 400 will return with an error message.
				.separator
			main
				#profileposting.anchor

				.main-block
					h1 Profile Posting (usually broken)
					p POST: /postProfileComment

					p Leaves a profile post. This one is a POST request!

					br
					+revealTag("Parameters (5)")
					#params-profileposting.subdiv
						p comment: The content of the profile post
						p username: Your username
						p accountID: Your account ID
						p password: Your password (as plain text)
						p color: If the comment should have a special pink color on GDBrowser (optional)

					br
					+revealTag("Example")
					#request-profileposting.subdiv
						p
							b Example Request
						p
							| POST /postProfileComment
							br
							| ?comment=I'm New Vietnam not New Viet
							br
							| &amp;username=newvietnam
							br
							| &amp;accountID=21946955
							br
							| &amp;password=PartiaKomunistycznaIndonezyjska

						br
						p If a status of 200 is returned, then the profile post was successfully posted. Otherwise, a 400 will return with an error message.
				.separator
			main
				#liking.anchor

				.main-block
					h1 Profile Posting (usually broken)
					p POST: /like

					p Leaves a profile post. This one is a POST request!

					br
					+revealTag("Parameters (5)")
					#params-liking.subdiv
						p ID: The ID of the item to like. This should be a level ID, comment ID, or profile post ID
						p like: Whether to like or dislike the level. 1=like, 0=dislike
						p type: The type of item you're liking. 1=level, 2=comment, 3=profile post
						p extraID: An extra ID. This should be the level ID for comments, the account ID for profile posts, or "0" for levels
						p accountID: Your account ID
						p password: Your password (as plain text)

					br
					+revealTag("Example")
					#request-liking.subdiv
						p
							b Example Request
						p Drop a like on a random comment in "isolation my ver":
						p
							| POST /like
							br
							| ?id=2262645 (ID of the comment)
							br
							| &amp;like=1 (thumbs up)
							br
							| &amp;type=2 (liking a comment)
							br
							| &amp;extraID=91209839 (ID of isolation my ver)
							br
							| &amp;username=newvietnam
							br
							| &amp;accountID=21946955
							br
							| &amp;password=PartiaKomunistycznaIndonezyjska

						br
						p
							| A status of 200 will return if everything goes well, otherwise a 400 will return with an error message.
							br
							| Liking a comment multiple times on the same account will return a 200, but not actually increase the in-game like counter.
				.separator
			main
				#messages.anchor

				.main-block
					h1 Messages (usually broken)
					p
						| POST:
						br
						b /messages
						|
						| (fetches messages, includes subject but not actual content. blame robtop)
						br
						b /messages/messageID
						|
						| (reads a message)
						br
						b /deleteMessage
						|
						| (deletes a message)
						br
						b /sendMessage
						|
						| (sends a message)

					p I decided to put all 4 of these requests in one section because they're fairly similar ¯\_(ツ)_/¯

					br
					+revealTag("Parameters")
					#params-messages.subdiv
						p
							b All:
						p accountID: Your account ID
						p password: Your password (as plain text)

						br
						p
							b /messages:
						p page: The page of the search
						p sent: Set to 1 or true to fetch your sent messages
						p count: Set to 1 or true to fetch your number of unread messages

						br
						p
							b /deleteMessage:
						p id: The ID of the message to delete, or an array of multiple IDs

						br
						p
							b /sendMessage:
						p targetID: The account ID of the message recipient
						p subject: The subject of the message, max 50 characters
						p message: The content of the message, max 300 characters
						p color: If the message should have a special pink color on GDBrowser (optional)

					br
					+revealTag("Example")
					#request-messages.subdiv
						p
							b Example Request

						p Fetch your messages
						p
							| POST /messages
							br
							| ?page=0
							br
							| &amp;accountID=21946955
							br
							| &amp;password=PartiaKomunistycznaIndonezyjska
						br

						p Read message with ID of 2528606:
						p
							| POST /messages
							br
							| ?accountID=21946955
							br
							| &amp;id=2528606
							br
							| &amp;password=PartiaKomunistycznaIndonezyjska
						br

						p Delete message with ID of 2528606:
						p
							| POST /deleteMessage
							br
							| ?accountID=21946955
							br
							| &amp;id=2528606
							br
							| &amp;password=PartiaKomunistycznaIndonezyjska
						br

						p Send "Hello!" to MindCap:
						p
							| POST /messages
							br
							| ?accountID=21946955
							br
							| &amp;password=PartiaKomunistycznaIndonezyjska
							br
							| &amp;subject=Different levels, same song.
							br
							| &amp;message=Hello!
							br
							| &amp;targetID=2156992
						br

						p
							| A status of 200 will return if everything goes well, otherwise a 400 will return with an error message.
							br
							| Deleting a message ID that doesn't exist will still return a 200 but won't do anything.
				.separator
			main
				#artist.anchor

				.main-block
					h1 Song Verification
					p /api/song/songID

					p Checks if a song is allowed for use
					p
						| For a song to be useable, the artist must be scouted on Newgrounds and the song must be enabled for external use.
						br
						| If the song was published after March 2017, the artist must also be whitelisted by a GD moderator.

					br
					+revealTag("Parameters (0)")
					#params-artist.subdiv
						p No parameters for this one!

					br
					+revealTag("Response (1)")
					#response-artist.subdiv
						p literally just returns true or false (or -1 if there's an error)
						p there used to be more but rob disabled his song api sooo

					br
					+revealTag("Old response (8)")
					#response-artist-old.subdiv
						p
							b *This is the response if RobTop's song API is enabled
						p error: Appears if the GD servers rejected the request or not. <code>song.allowed</code> may still work even with an error
						p exists: If the provided song exists on Newgrounds
						p artist.name: The name of the artist
						p artist.scouted: If the artist was scouted by a Newgrounds member
						p artist.whitelisted: If the artist was whitelisted by a Geometry Dash moderator
						p song.name: The name of the song
						p song.externalUse: If the song is allowed for external use
						p song.allowed: If the song is allowed for use in GD

				.separator
			main
				#analyze.anchor

				.main-block
					h1 Level Analysis
					p /api/analyze/levelID

					p Analyzes a level's data
					p
						sb Level analysis is updated a lot so there may be changes in the future

					br
					+revealTag("Parameters (0)")
					#params-analyze.subdiv
						p No parameters for this one!

					br
					+revealTag("Response (12)")
					#response-analyze.subdiv
						p
							b Response is subject to change in the future
						p The API will return the following information about the level:
						p level: Basic level info (name, ID, author, etc)
						p settings: The level's settings (song offset, starting form/speed, two player mode, font, etc)
						p portals: A string listing the order of all the portals in the level + their percent. Does not include starting form/speed
						p orbs: How many of each jump ring is in the level
						p triggers: How many of each trigger is in the level
						p blocks: How many of each block type is in the level
						p triggerGroups: How many of each group ID is in the level
						p misc: Amount of objects that aren't categorized above (glow, arrows, clouds, pickups, etc)
						p colors: The level's initial color channels. Contains channel, R, G, B, opacity, player color, blending, and copied channel
						p text: An array of all the text objects in a level. ([text, percent])
						p dataLength: How long the level data is (spoilers - very)
						p data: The decrypted data of the level. And it's freakin' huge

					br

				.separator
			main
				#icons.anchor

				.main-block
					h1 Map Packs
					p /api/mappacks
					h1 Gauntlets
					p /api/gauntlets

					p Returns the list of map packs or gauntlets
					p(style={ "font-size": "14px" }) I'm putting this in the same section because they're basically the same lol

					br
					+revealTag("Parameters (11)")
					#params-icons.subdiv
						p
							b Parameters can be used to modify parts of a fetched user's icon
						p IDs generally correspond to their order of appearance in GD
						p form: The form of the icon (cube/ship/ball/ufo/wave/robot/spider/swing/cursed)
						p icon: The ID of the icon to use
						p col1: The ID or hex code of the primary color to use
						p col2: The ID of hex code the secondary color to use
						p colG: Optional color ID or hex code to overwrite the glow for the icon
						p colW: Optional color ID or hex code to overwrite the 'white' layer used by some detailed icons
						p glow: If the icon should have a glow/outline (0 = off, anything else = on)
						p size: The size in pixels that the icon should be (always square), in case you don't want the default. "auto" also works.
						p topless: Removes the glass 'dome' from generated UFOs (legacy)
						p player: Forces the player ID to be used for fetching (normally Account ID is tried first)
						p noUser: Disables fetching the icon from the GD servers. Slightly faster, but comes at the cost of having to build icons from the ground up using the parameters listed above. It completely ignores the entered username and always returns the default icon

					br
					+revealTag("Response (1)")
					#response-icons.subdiv
						p A 503 error hits on your face.

					br
					+revealTag("Old response (1)")
					#response-icons.subdiv
						p A lovely PNG of the icon you fetched!

					br
					+revealTag("Examples (old)")
					#request-icons.subdiv
						p
							b Sample Icons
						p 
							a(target="_blank", style={ "font-weight": "400" }, href="/icon/unzor") /icon/unzor
							|
							| (Unzor's beautiful icon)
						p 
							a(target="_blank", style={ "font-weight": "400" }, href="/icon/unzor?form=ship") /icon/unzor?form=ship
							|
							| (Unzor's beautiful ship)
						p 
							a(target="_blank", style={ "font-weight": "400" }, href="/icon/unzor?col1=41&col2=12") /icon/unzor?col1=40&amp;col2=12
							|
							| (Unzor's beautiful icon, but it's green)
						p 
							a(target="_blank", style={ "font-weight": "400" }, href="/icon/unzor?icon=98&col1=41&col2=12&glow=1") /icon/unzor?icon=98&amp;col1=41&amp;col2=12&amp;glow=1
							|
							| (Unzor's beautiful icon, but edited to a familiar face)
						p(style={ "margin-top": "9px", "font-weight": "400" }) ^since practically all the values are being changed for that last one, it's a good idea to use the noUser parameter</p>
							br
				.separator
			footer
				p
					| API made by
					|
					a(href="https://twitter.com/TheRealGDColon") GD Colon
					| . Webpage design by
					|
					a(href="https://twitter.com/GDUcrash") GD Ucrash
					br
					br
					| Good job man, this looks really nice -Colon

		script(type="module", src="/page_scripts/api.js")